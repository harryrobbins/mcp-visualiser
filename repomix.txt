This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: .svelte-kit/, node_modules
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
brief.md
package.json
postcss.config.cjs
repomix.sh
src/app.html
src/routes/+page.svelte
src/style.css
svelte.config.js
tailwind.config.cjs
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="brief.md">
Project Brief: MCP Visualiser Application

1. Introduction & Goal:

The primary goal of this web application is to serve as an educational tool that visually demonstrates the concept and flow of the Model Context Protocol (MCP). It aims to demystify how MCP structures conversational context and how that context evolves during an interaction between a user, frontend, backend, and an AI model (LLM). The target audience includes developers, AI practitioners, or anyone seeking a clearer understanding of MCP principles.

2. Problem Addressed:

The Model Context Protocol standardizes how rich contextual information (like chat history, system instructions, tool usage) is packaged and exchanged in AI systems. However, understanding this flow purely from specification documents or static JSON examples can be abstract. This visualiser provides a dynamic, step-by-step visual representation to make the process more tangible and easier to grasp.

3. Core Functionality:

The application presents a simplified, predefined AI interaction sequence on a single web page, featuring:

Actor Visualisation: A main canvas area displays key system components as distinct nodes (e.g., "User", "Web Client", "Backend App", "LLM") connected by edges (arrows) representing potential communication paths. This uses the Svelte Flow library for rendering.
Sequential Flow Animation: Users click a "Next Step" button to advance through the predefined interaction sequence (e.g., user sends message, backend processes, LLM receives context, LLM responds, etc.). The currently active part of the flow is indicated by highlighting the relevant actors and/or edges involved in that specific step.
MCP Object Display: A sidebar persistently displays the current state of the MCP JSON object relevant to the interaction step being shown. This uses a JSON tree viewer component for clear formatting.
Synchronised Updates: As the user clicks "Next Step" and the visual flow progresses, the MCP object displayed in the sidebar updates simultaneously, clearly showing how messages (user, assistant, tool calls/results if included) are added or how the context package changes at each stage.
Contextual Description: A simple text label indicates the action being performed in the current step (e.g., "Backend sends context to LLM").
4. Scope:

In Scope: Visualising a single, hardcoded example interaction sequence; demonstrating the structure and evolution of an MCP object; providing simple, forward-only step-through control.
Out of Scope: Real-time interaction processing; allowing users to input custom messages or define custom sequences; complex debugging features (e.g., rewind, step back, breakpoints); acting as a tool to generate or validate MCP objects. It is purely an illustrative/educational tool based on a fixed scenario.
5. Technology:

The application is built as a single-page web app using:

SvelteKit: A modern web framework providing structure, routing (though minimal here), and build tooling.
Svelte Flow (@xyflow/svelte): A library for rendering the node-based actor/flow diagram.
Svelte: The underlying UI compiler driving reactivity and component structure.
Vanilla JS/Svelte Stores: For managing the state of the current step and associated data.
svelte-json-tree (or similar): For displaying the MCP JSON object.
6. Benefit:

By visually correlating the message flow between system components with the corresponding changes in the structured MCP context object, this application provides an intuitive and accessible way to understand the fundamental mechanics and value of the Model Context Protocol.
</file>

<file path="package.json">
{
  "name": "mcp-visualiser",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "dev": "vite dev",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint .",
    "format": "prettier --write ."
  },
  "devDependencies": {
    "@sveltejs/adapter-auto": "^3.0.0",
    "@sveltejs/kit": "^2.0.0",
    "@sveltejs/vite-plugin-svelte": "^3.0.0",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.56.0",
    "eslint-plugin-svelte": "^2.35.1",
    "postcss": "^8.4.38",
    "prettier": "^3.1.1",
    "prettier-plugin-svelte": "^3.1.2",
    "svelte": "^4.2.7",
    "tailwindcss": "^3.4.3",
    "vite": "^5.0.3"
  },
  "type": "module",
  "dependencies": {
    "@xyflow/svelte": "^0.1.34",
    "svelte-json-tree": "^2.2.0"
  }
}
</file>

<file path="postcss.config.cjs">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="repomix.sh">
npx repomix -i .svelte-kit/,node_modules -o repomix.txt
</file>

<file path="src/app.html">
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<link rel="icon" href="%sveltekit.assets%/favicon.png" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
%sveltekit.head%
</head>
<body data-sveltekit-preload-data="hover">
<div style="display: contents">%sveltekit.body%</div>
</body>
</html>
</file>

<file path="src/routes/+page.svelte">
<script>
  import { SvelteFlow, Controls, Background, Position } from '@xyflow/svelte';
  import { writable, derived } from 'svelte/store';
  import JsonTree from 'svelte-json-tree'; // Assuming installed

  // 1. Define Interaction Steps & MCP States
  const interactionSteps = [
    {
      description: "Initial State",
      highlightIds: [], // Nothing highlighted initially
      mcpState: { protocol: "mcp", version: "1.0", conversation_id: "vis-convo-1", context: { messages: [] } }
    },
    {
      description: "User sends 'Hello'",
      highlightIds: ['user', 'client'], // Highlight user and client receiving
      mcpState: {
        protocol: "mcp", version: "1.0", conversation_id: "vis-convo-1",
        context: { messages: [ { role: "user", content: "Hello" } ] }
      }
    },
    {
      description: "Client sends request to Backend",
      highlightIds: ['client', 'backend'],
      mcpState: { // State as received/processed by backend initially
        protocol: "mcp", version: "1.0", conversation_id: "vis-convo-1",
        context: { messages: [ { role: "user", content: "Hello" } ] }
      }
    },
    {
      description: "Backend sends context to LLM",
      highlightIds: ['backend', 'llm'],
      mcpState: { // Backend adds system prompt before sending
        protocol: "mcp", version: "1.0", conversation_id: "vis-convo-1",
        context: { messages: [
           { role: "system", content: "You are a helpful assistant." },
           { role: "user", content: "Hello" }
        ] }
      }
    },
    {
      description: "LLM responds, received by Backend",
      highlightIds: ['llm', 'backend'], // LLM generated, Backend received
      mcpState: { // State before backend adds assistant response to history
        protocol: "mcp", version: "1.0", conversation_id: "vis-convo-1",
        context: { messages: [
          { role: "system", content: "You are a helpful assistant." },
          { role: "user", content: "Hello" }
          // LLM response "Hi there!" is processed next
        ] }
      }
    },
    {
      description: "Backend sends response to Client",
      highlightIds: ['backend', 'client'],
      mcpState: { // State includes assistant response now
        protocol: "mcp", version: "1.0", conversation_id: "vis-convo-1",
        context: { messages: [
          { role: "system", content: "You are a helpful assistant." },
          { role: "user", content: "Hello" },
          { role: "assistant", content: "Hi there!" }
        ] }
      }
    },
    {
      description: "Client displays response to User",
      highlightIds: ['client', 'user'],
      mcpState: { // Final state for this turn displayed
        protocol: "mcp", version: "1.0", conversation_id: "vis-convo-1",
        context: { messages: [
          { role: "system", content: "You are a helpful assistant." },
          { role: "user", content: "Hello" },
          { role: "assistant", content: "Hi there!" }
        ] }
      }
    }
  ];

  // 2. State Management
  const currentStepIndex = writable(0);
  const currentStep = derived(currentStepIndex, ($index) => interactionSteps[$index]);
  const currentMcpState = derived(currentStep, ($step) => $step.mcpState);

  // 3. Svelte Flow Nodes (Actors)
  const initialNodes = [
    { id: 'user', type: 'input', data: { label: 'User' }, position: { x: 50, y: 150 }, sourcePosition: Position.Right },
    { id: 'client', data: { label: 'Web Client' }, position: { x: 250, y: 150 }, sourcePosition: Position.Right, targetPosition: Position.Left },
    { id: 'backend', data: { label: 'Backend App' }, position: { x: 450, y: 150 }, sourcePosition: Position.Right, targetPosition: Position.Left },
    { id: 'llm', type: 'output', data: { label: 'LLM' }, position: { x: 650, y: 150 }, targetPosition: Position.Left },
  ];
  let nodes = writable(initialNodes); // Use writable store

  // 4. Svelte Flow Edges (Connections)
  const initialEdges = [
    { id: 'edge-user-client', source: 'user', target: 'client', animated: false }, // Removed direct style
    { id: 'edge-client-backend', source: 'client', target: 'backend', animated: false }, // Removed direct style
    { id: 'edge-backend-llm', source: 'backend', target: 'llm', animated: false }, // Removed direct style
    // Add return path edges if needed, e.g.:
    // { id: 'edge-llm-backend', source: 'llm', target: 'backend', animated: false },
    // { id: 'edge-backend-client', source: 'backend', target: 'client', animated: false },
    // { id: 'edge-client-user', source: 'client', target: 'user', animated: false },
  ];
   let edges = writable(initialEdges); // Use writable store

  // 5. Step Advancement Function
  function nextStep() {
    currentStepIndex.update(index => {
      let nextIndex = index + 1;
      if (nextIndex >= interactionSteps.length) {
        nextIndex = 0; // Loop back to the beginning
      }
      return nextIndex;
    });
  }

  // 6. Reactive Logic to Update Styles via Classes
  $: {
    const step = $currentStep;
    if (step) {
        // Update Nodes: Add/remove a 'highlight' class
        nodes.update(nds => nds.map(n => ({
            ...n,
            class: step.highlightIds.includes(n.id) ? 'highlight' : '' // Assign class based on highlight state
        })));

        // Update Edges: Add/remove animation and 'highlight' class
        edges.update(eds => eds.map(e => {
            // Highlight edge if BOTH source AND target are highlighted in this step
            const isActive = step.highlightIds.includes(e.source) && step.highlightIds.includes(e.target);

            return {
                ...e,
                class: isActive ? 'highlight' : '', // Assign class based on highlight state
                animated: isActive // Control animation based on the same logic
            };
        }));
    }
  }

</script>

<div class="app-container">
  <div class="flow-container">
    <SvelteFlow {nodes} {edges} fitView>
      <Background />
      <Controls />
    </SvelteFlow>
  </div>

  <div class="sidebar">
    <h2>MCP Visualiser</h2>
    <button on:click={nextStep}>Next Step</button>
    <div class="step-info">
        <p><strong>Step {$currentStepIndex + 1}/{interactionSteps.length}:</strong> {$currentStep.description}</p>
    </div>
    <hr/>
    <h3>MCP State</h3>
    <div class="mcp-display">
      <JsonTree value={$currentMcpState} />
    </div>
  </div>
</div>

<style>
  /* Base layout styles */
  .app-container {
    display: flex;
    height: 100vh;
    width: 100vw;
    font-family: sans-serif;
  }

  .flow-container {
    flex-grow: 1;
    height: 100%;
    width: 100%; /* Ensure width is explicitly set */
    border-right: 1px solid #ccc;
    position: relative; /* Good practice for positioning child elements */
  }

  .sidebar {
    width: 350px; /* Adjust width as needed */
    padding: 15px;
    box-sizing: border-box;
    overflow-y: auto;
    height: 100%;
    background-color: #f9f9f9;
    display: flex;
    flex-direction: column;
  }

  .sidebar h2, .sidebar h3 {
      margin-top: 0;
  }

  .sidebar button {
      padding: 10px 15px;
      font-size: 1em;
      margin-bottom: 15px;
      cursor: pointer;
  }

  .step-info {
      background-color: #eee;
      padding: 5px 10px;
      border-radius: 4px;
      margin-bottom: 15px;
  }

   .mcp-display {
       flex-grow: 1;
       overflow: auto;
       background-color: white;
       border: 1px solid #eee;
       padding: 5px;
       font-size: 0.9em;
   }

  /* Global styles for Svelte Flow with !important to override conflicts */
  /* IMPORTANT: Using !important is a workaround for CSS conflicts.
     Ideally, resolve conflicts without !important if possible,
     but this ensures rendering for now. */

  /* Default Node Styles */
  :global(.svelte-flow__node) {
    border: 1px solid #777 !important;
    padding: 10px 15px !important;
    border-radius: 3px !important;
    background: white !important;
    min-width: 150px !important;
    text-align: center !important;
    position: absolute !important; /* Crucial for positioning */
    display: block !important;    /* Ensure correct display type */
    visibility: visible !important; /* Ensure visibility */
  }

  /* Highlighted Node Style */
  :global(.svelte-flow__node.highlight) {
    background: lightblue !important;
    border-color: dodgerblue !important;
  }

  /* Default Edge Style */
  :global(.svelte-flow__edge .svelte-flow__edge-path) {
    stroke: #aaa !important;
    stroke-width: 2 !important;
    fill: none !important; /* Edges shouldn't be filled */
    stroke-linecap: round !important; /* Nicer line ends */
    stroke-linejoin: round !important;
    pointer-events: none !important; /* Usually handled by Svelte Flow */
    visibility: visible !important; /* Ensure visibility */
  }

  /* Highlighted Edge Style */
  :global(.svelte-flow__edge.highlight .svelte-flow__edge-path) {
    stroke: dodgerblue !important;
    stroke-width: 3 !important;
  }

  /* Optional: Style for animated edges (Svelte Flow adds .animated class) */
  :global(.svelte-flow__edge.animated .svelte-flow__edge-path) {
      /* Svelte Flow handles animation, you might add dashed stroke etc. if desired */
      /* stroke-dasharray: 5, 5 !important; */
  }

</style>
</file>

<file path="src/style.css">
/* src/app.css */

/* Import Svelte Flow base styles */
@import '@xyflow/svelte/dist/style.css';
@import 'svelte-json-tree/dist/svelte-json-tree.css';
/* If using Tailwind, import its layers */
/*@tailwind base;*/
/*@tailwind components;*/
/*@tailwind utilities;*/

/* Add any other global styles here */
body {
  font-family: sans-serif;
  margin: 0;
  height: 100vh;
  width: 100vw;
  overflow: hidden; /* Prevent body scroll */
}

/* Example: Define highlight class if needed globally,
   though direct styles were used in the component example */
/*
.highlight-node {
  border: 2px solid dodgerblue !important;
}
*/
</file>

<file path="svelte.config.js">
import adapter from '@sveltejs/adapter-auto';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
const config = {
  // Consult https://kit.svelte.dev/docs/integrations#preprocessors
  // for more information about preprocessors
  preprocess: vitePreprocess(),

  kit: {
    // adapter-auto only supports some environments, see https://kit.svelte.dev/docs/adapter-auto for a list.
    // If your environment is not supported or you settled on a specific environment, switch out the adapter.
    // See https://kit.svelte.dev/docs/adapters for more information about adapters.
    adapter: adapter()
  }
};

export default config;
</file>

<file path="tailwind.config.cjs">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./src/**/*.{html,js,svelte,ts}'], // Configure paths to your template files
  theme: {
    extend: {},
  },
  plugins: [],
}
</file>

<file path="vite.config.js">
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
  plugins: [sveltekit()]
});
</file>

</files>
